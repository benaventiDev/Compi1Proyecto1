/* The following code was generated by JFlex 1.7.0 */

/*Seccion de codigo de usuario*/

package main.specifications;


//import java_cup.runtime.*;
import java.io.Reader;
import main.specifications.Symbol;
import main.specifications.sym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/specifications/lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int STRING_COMP = 4;
  public static final int COMPONENTSTATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\3\1\2\1\0\1\3\1\1\16\15\4\0\1\3\1\42"+
    "\1\54\1\0\1\14\1\0\1\43\1\0\1\13\1\33\1\5\1\41"+
    "\1\51\1\16\1\20\1\4\12\17\1\0\1\50\1\36\1\40\1\37"+
    "\2\0\1\22\1\56\1\53\1\52\1\7\1\21\1\57\1\61\1\46"+
    "\2\14\1\23\1\47\1\12\1\27\1\26\1\14\1\6\1\24\1\10"+
    "\1\11\1\25\1\30\1\55\1\60\1\14\1\34\1\62\1\35\1\45"+
    "\1\14\1\0\1\22\1\56\1\53\1\52\1\7\1\21\1\57\1\61"+
    "\1\46\2\14\1\23\1\47\1\12\1\27\1\26\1\14\1\6\1\24"+
    "\1\10\1\11\1\25\1\30\1\55\1\60\1\14\1\31\1\44\1\32"+
    "\1\0\41\15\2\0\4\14\4\0\1\14\2\0\1\15\7\0\1\14"+
    "\4\0\1\14\5\0\27\14\1\0\37\14\1\0\70\14\2\46\115\14"+
    "\1\24\u0142\14\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14"+
    "\21\0\160\15\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0"+
    "\1\14\1\0\3\14\1\0\1\14\1\0\24\14\1\0\123\14\1\0"+
    "\213\14\1\0\5\15\2\0\246\14\1\0\46\14\2\0\1\14\6\0"+
    "\51\14\6\0\1\14\1\0\55\15\1\0\1\15\1\0\2\15\1\0"+
    "\2\15\1\0\1\15\10\0\33\14\4\0\4\14\15\0\6\15\5\0"+
    "\1\14\4\0\13\15\1\0\1\15\3\0\53\14\37\15\4\0\2\14"+
    "\1\15\143\14\1\0\1\14\10\15\1\0\6\15\2\14\2\15\1\0"+
    "\4\15\2\14\12\15\3\14\2\0\1\14\17\0\1\15\1\14\1\15"+
    "\36\14\33\15\2\0\131\14\13\15\1\14\16\0\12\15\41\14\11\15"+
    "\2\14\4\0\1\14\2\0\1\15\30\14\4\15\1\14\11\15\1\14"+
    "\3\15\1\14\5\15\22\0\31\14\3\15\4\0\13\14\65\0\25\14"+
    "\1\0\10\14\25\0\61\15\66\14\3\15\1\14\22\15\1\14\7\15"+
    "\12\14\2\15\2\0\12\15\1\0\20\14\3\15\1\0\10\14\2\0"+
    "\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\2\0"+
    "\1\15\1\14\7\15\2\0\2\15\2\0\3\15\1\14\10\0\1\15"+
    "\4\0\2\14\1\0\3\14\2\15\2\0\12\15\4\14\7\0\2\14"+
    "\1\0\1\15\2\0\3\15\1\0\6\14\4\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\15"+
    "\1\0\5\15\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\14"+
    "\1\0\1\14\7\0\14\15\3\14\1\15\13\0\3\15\1\0\11\14"+
    "\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\15\1\14\10\15\1\0\3\15\1\0\3\15\2\0\1\14"+
    "\17\0\2\14\2\15\2\0\12\15\1\0\1\14\7\0\1\14\6\15"+
    "\1\0\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\15\1\14\7\15\2\0\2\15"+
    "\2\0\3\15\10\0\2\15\4\0\2\14\1\0\3\14\2\15\2\0"+
    "\12\15\1\0\1\14\20\0\1\15\1\14\1\0\6\14\3\0\3\14"+
    "\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14"+
    "\3\0\3\14\3\0\14\14\4\0\5\15\3\0\3\15\1\0\4\15"+
    "\2\0\1\14\6\0\1\15\16\0\12\15\11\0\1\14\6\0\5\15"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\20\14\3\0\1\14\7\15"+
    "\1\0\3\15\1\0\4\15\7\0\2\15\1\0\3\14\5\0\2\14"+
    "\2\15\2\0\12\15\20\0\1\14\3\15\1\0\10\14\1\0\3\14"+
    "\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\15\1\14\7\15"+
    "\1\0\3\15\1\0\4\15\7\0\2\15\7\0\1\14\1\0\2\14"+
    "\2\15\2\0\12\15\1\0\2\14\15\0\4\15\1\0\10\14\1\0"+
    "\3\14\1\0\51\14\2\15\1\14\7\15\1\0\3\15\1\0\4\15"+
    "\1\14\5\0\3\14\1\15\7\0\3\14\2\15\2\0\12\15\12\0"+
    "\6\14\2\0\2\15\1\0\22\14\3\0\30\14\1\0\11\14\1\0"+
    "\1\14\2\0\7\14\3\0\1\15\4\0\6\15\1\0\1\15\1\0"+
    "\10\15\6\0\12\15\2\0\2\15\15\0\60\14\1\15\2\14\7\15"+
    "\4\0\10\14\10\15\1\0\12\15\47\0\2\14\1\0\1\14\2\0"+
    "\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0"+
    "\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\15"+
    "\2\14\6\15\1\0\2\15\1\14\2\0\5\14\1\0\1\14\1\0"+
    "\6\15\2\0\12\15\2\0\4\14\40\0\1\14\27\0\2\15\6\0"+
    "\12\15\13\0\1\15\1\0\1\15\1\0\1\15\4\0\2\15\10\14"+
    "\1\0\44\14\4\0\24\15\1\0\2\15\5\14\13\15\1\0\44\15"+
    "\11\0\1\15\71\0\53\14\24\15\1\14\12\15\6\0\6\14\4\15"+
    "\4\14\3\15\1\14\3\15\2\14\7\15\3\14\4\15\15\14\14\15"+
    "\1\14\17\15\2\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14"+
    "\1\0\u014d\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\51\14\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14"+
    "\2\0\103\14\2\0\3\15\40\0\20\14\20\0\126\14\2\0\6\14"+
    "\3\0\u026c\14\2\0\21\14\1\0\32\14\5\0\113\14\3\0\13\14"+
    "\7\0\15\14\1\0\4\14\3\15\13\0\22\14\3\15\13\0\22\14"+
    "\2\15\14\0\15\14\1\0\3\14\1\0\2\15\14\0\64\14\40\15"+
    "\3\0\1\14\3\0\2\14\1\15\2\0\12\15\41\0\4\15\1\0"+
    "\12\15\6\0\131\14\7\0\5\14\2\15\42\14\1\15\1\14\5\0"+
    "\106\14\12\0\37\14\1\0\14\15\4\0\14\15\12\0\12\15\36\14"+
    "\2\0\5\14\13\0\54\14\4\0\32\14\6\0\12\15\46\0\27\14"+
    "\5\15\4\0\65\14\12\15\1\0\35\15\2\0\13\15\6\0\12\15"+
    "\15\0\1\14\10\0\16\15\102\0\5\15\57\14\21\15\7\14\4\0"+
    "\12\15\21\0\11\15\14\0\3\15\36\14\15\15\2\14\12\15\54\14"+
    "\16\15\14\0\44\14\24\15\10\0\12\15\3\0\3\14\12\15\44\14"+
    "\2\0\11\14\7\0\53\14\2\0\3\14\20\0\3\15\1\0\25\15"+
    "\4\14\1\15\4\14\3\15\2\14\3\15\6\0\300\14\72\15\1\0"+
    "\5\15\u0116\14\2\0\6\14\2\0\46\14\2\0\6\14\2\0\10\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\0\37\14\2\0\65\14"+
    "\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14"+
    "\2\0\6\14\4\0\15\14\5\0\3\14\1\0\7\14\16\0\5\15"+
    "\32\0\5\15\20\0\2\14\23\0\1\14\13\0\5\15\1\0\12\15"+
    "\1\0\1\14\15\0\1\14\20\0\15\14\3\0\40\14\20\0\15\15"+
    "\4\0\1\15\3\0\14\15\21\0\1\14\4\0\1\14\2\0\12\14"+
    "\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14"+
    "\21\0\51\14\u0a77\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14"+
    "\3\15\2\14\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14"+
    "\7\0\1\14\17\0\1\15\27\14\11\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\40\15\57\0\1\14\u01d5\0\3\14\31\0\11\14\6\15"+
    "\1\0\5\14\2\0\5\14\4\0\126\14\2\0\2\15\2\0\3\14"+
    "\1\0\132\14\1\0\4\14\5\0\53\14\1\0\136\14\21\0\33\14"+
    "\65\0\20\14\u0200\0\u19b6\14\112\0\u51f0\14\20\0\u048d\14\103\0\56\14"+
    "\2\0\u010d\14\3\0\20\14\12\15\2\14\24\0\57\14\1\15\4\0"+
    "\12\15\1\0\37\14\2\15\120\14\2\15\45\0\11\14\2\0\147\14"+
    "\2\0\57\14\75\0\13\14\1\15\3\14\1\15\4\14\1\15\27\14"+
    "\5\15\20\0\1\14\7\0\64\14\14\0\2\15\62\14\22\15\12\0"+
    "\12\15\6\0\22\15\6\14\3\0\1\14\1\0\2\14\13\15\34\14"+
    "\10\15\2\0\27\14\15\15\14\0\35\14\3\0\4\15\57\14\16\15"+
    "\16\0\1\14\12\15\6\0\5\14\1\15\12\14\12\15\5\14\1\0"+
    "\51\14\16\15\11\0\3\14\1\15\10\14\2\15\2\0\12\15\6\0"+
    "\27\14\3\0\1\14\3\15\62\14\1\15\1\14\3\15\2\14\2\15"+
    "\5\14\2\15\1\14\1\15\1\14\30\0\3\14\2\0\13\14\5\15"+
    "\2\0\3\14\2\15\12\0\6\14\2\0\6\14\2\0\6\14\11\0"+
    "\7\14\1\0\7\14\1\0\53\14\1\0\12\14\12\0\163\14\10\15"+
    "\1\0\2\15\2\0\12\15\6\0\u2ba4\14\14\0\27\14\4\0\61\14"+
    "\u2104\0\u016e\14\2\0\152\14\46\0\7\14\14\0\5\14\5\0\1\14"+
    "\1\15\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14"+
    "\50\0\15\14\3\0\20\15\20\0\20\15\3\0\2\14\30\0\3\14"+
    "\31\0\1\14\6\0\5\14\1\0\207\14\2\0\1\15\4\0\1\14"+
    "\13\0\12\15\7\0\32\14\4\0\1\14\1\0\32\14\13\0\131\14"+
    "\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\2\14"+
    "\3\0\2\14\22\0\3\15\4\0\14\14\1\0\32\14\1\0\23\14"+
    "\1\0\2\14\1\0\17\14\2\0\16\14\42\0\173\14\105\0\65\14"+
    "\210\0\1\15\202\0\35\14\3\0\61\14\17\0\1\15\37\0\40\14"+
    "\15\0\36\14\5\0\46\14\5\15\5\0\36\14\2\0\44\14\4\0"+
    "\10\14\1\0\5\14\52\0\236\14\2\0\12\15\6\0\44\14\4\0"+
    "\44\14\4\0\50\14\10\0\64\14\234\0\u0137\14\11\0\26\14\12\0"+
    "\10\14\230\0\6\14\2\0\1\14\1\0\54\14\1\0\2\14\3\0"+
    "\1\14\2\0\27\14\12\0\27\14\11\0\37\14\101\0\23\14\1\0"+
    "\2\14\12\0\26\14\12\0\32\14\106\0\70\14\6\0\2\14\100\0"+
    "\1\14\3\15\1\0\2\15\5\0\4\15\4\14\1\0\3\14\1\0"+
    "\35\14\2\0\3\15\4\0\1\15\40\0\35\14\3\0\35\14\43\0"+
    "\10\14\1\0\34\14\2\15\31\0\66\14\12\0\26\14\12\0\23\14"+
    "\15\0\22\14\156\0\111\14\67\0\63\14\15\0\63\14\15\0\44\14"+
    "\4\15\10\0\12\15\u01c6\0\35\14\12\0\1\14\10\0\26\14\13\15"+
    "\257\0\3\15\65\14\17\15\37\0\12\15\17\0\4\15\55\14\13\15"+
    "\2\0\1\15\17\0\1\15\2\0\31\14\7\0\12\15\6\0\3\15"+
    "\44\14\16\15\1\0\12\15\4\0\1\14\2\15\11\0\43\14\1\15"+
    "\2\0\1\14\11\0\3\15\60\14\16\15\4\14\4\0\4\15\3\0"+
    "\12\15\1\14\1\0\1\14\43\0\22\14\1\0\31\14\14\15\6\0"+
    "\1\15\101\0\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0"+
    "\12\14\7\0\57\14\14\15\5\0\12\15\6\0\4\15\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\1\0\2\15\1\14\7\15\2\0\2\15\2\0\3\15\2\0\1\14"+
    "\6\0\1\15\5\0\5\14\2\15\2\0\7\15\3\0\5\15\213\0"+
    "\65\14\22\15\4\14\5\0\12\15\4\0\1\15\41\0\60\14\24\15"+
    "\2\14\1\0\1\14\10\0\12\15\246\0\57\14\7\15\2\0\11\15"+
    "\27\0\4\14\2\15\42\0\60\14\21\15\3\0\1\14\13\0\12\15"+
    "\46\0\53\14\15\15\10\0\12\15\66\0\33\14\2\0\17\15\4\0"+
    "\12\15\306\0\54\14\17\15\145\0\100\14\12\15\25\0\1\14\u0100\0"+
    "\1\14\12\15\50\14\7\15\1\14\4\15\10\0\1\15\10\0\1\14"+
    "\13\15\50\14\2\0\4\14\20\15\3\0\1\14\42\0\71\14\u0107\0"+
    "\11\14\1\0\45\14\10\15\1\0\10\15\1\14\17\0\12\15\30\0"+
    "\36\14\2\0\26\15\1\0\16\15\111\0\7\14\1\0\2\14\1\0"+
    "\46\14\6\15\3\0\1\15\1\0\2\15\1\0\7\15\1\14\1\15"+
    "\10\0\12\15\6\0\6\14\1\0\2\14\1\0\40\14\5\15\1\0"+
    "\2\15\1\0\5\15\1\14\7\0\12\15\u0136\0\23\14\4\15\u0109\0"+
    "\u039a\14\146\0\157\14\21\0\304\14\u0abc\0\u042f\14\u0fd1\0\u0247\14\u21b9\0"+
    "\u0239\14\7\0\37\14\1\0\12\15\146\0\36\14\2\0\5\15\13\0"+
    "\60\14\7\15\11\0\4\14\14\0\12\15\11\0\25\14\5\0\23\14"+
    "\u02b0\0\100\14\200\0\105\14\13\0\1\14\56\15\20\0\4\15\15\14"+
    "\100\0\2\14\36\0\u17f2\14\16\0\u02f3\14\u250d\0\u011f\14\121\0\u018c\14"+
    "\u0904\0\153\14\5\0\15\14\3\0\11\14\7\0\12\14\3\0\2\15"+
    "\1\0\4\15\u14c1\0\5\15\3\0\26\15\2\0\7\15\36\0\4\15"+
    "\224\0\3\15\u01bb\0\125\14\1\0\107\14\1\0\2\14\2\0\1\14"+
    "\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14"+
    "\1\0\101\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0\34\14"+
    "\1\0\4\14\1\0\5\14\1\0\1\14\3\0\7\14\1\0\u0154\14"+
    "\2\0\31\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14"+
    "\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14"+
    "\1\0\10\14\2\0\62\15\u0200\0\67\15\4\0\62\15\10\0\1\15"+
    "\16\0\1\15\26\0\5\15\1\0\17\15\u0550\0\7\15\1\0\21\15"+
    "\2\0\7\15\1\0\2\15\1\0\5\15\u07d5\0\305\14\13\0\7\15"+
    "\51\0\104\14\7\15\5\0\12\15\u0356\0\1\14\u014f\0\4\14\1\0"+
    "\33\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0"+
    "\4\14\1\0\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\2\14\1\0\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0"+
    "\4\14\1\0\1\14\1\0\12\14\1\0\21\14\5\0\3\14\1\0"+
    "\5\14\1\0\21\14\u1144\0\ua6d7\14\51\0\u1035\14\13\0\336\14\2\0"+
    "\u1682\14\16\0\u1d31\14\u0c1f\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\15\36\0\140\15\200\0\360\15\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\3\5\1\6\1\7"+
    "\1\10\4\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\1\1\23\2\5\1\24"+
    "\1\25\1\5\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\5\1\1\1\10\4\5\1\34\1\16\1\17\1\20"+
    "\4\5\1\35\1\36\1\5\1\37\1\5\1\2\1\0"+
    "\2\5\1\0\2\5\1\40\2\5\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\3\5\1\47\1\50\1\51\1\52"+
    "\10\5\1\53\10\5\2\0\4\5\1\54\3\5\1\55"+
    "\1\56\13\5\1\57\1\60\6\5\1\0\1\2\3\5"+
    "\1\61\1\62\1\5\1\63\5\5\1\64\1\65\3\5"+
    "\1\66\12\5\1\67\7\5\1\70\1\71\1\72\2\5"+
    "\1\73\3\5\1\74\1\75\2\5\1\76\7\5\1\77"+
    "\1\100\1\101\2\0\1\102\1\103\5\5\1\104\1\105"+
    "\1\5\2\0\1\106\1\107\1\5\1\110\2\5\1\0"+
    "\1\102\2\0\1\111\1\112\1\113\5\0\1\102\1\0"+
    "\1\102\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\314\0\u0132"+
    "\0\314\0\u0165\0\u0198\0\u01cb\0\314\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\314\0\314\0\314\0\314\0\314"+
    "\0\u0330\0\u0363\0\u0396\0\314\0\u03c9\0\u03fc\0\u042f\0\314"+
    "\0\u0462\0\u0495\0\314\0\314\0\u04c8\0\314\0\u04fb\0\314"+
    "\0\u052e\0\314\0\u0132\0\u0561\0\u0594\0\u05c7\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\314\0\314\0\314\0\314\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\314\0\u0198\0\u0792\0\u0198\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\314\0\314\0\314\0\314\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0198"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u08c4\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0198\0\u0198\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u0198"+
    "\0\u0198\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u0dbf\0\u1320\0\u1353\0\u1386\0\u0198\0\u0198\0\u13b9\0\u0198"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u0198\0\u151e"+
    "\0\u1551\0\u1584\0\u0198\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u0198\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u0198\0\u0198\0\u0198"+
    "\0\u191a\0\u194d\0\u0198\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u0198"+
    "\0\u1a4c\0\u1a7f\0\u0198\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u0198\0\u0198\0\u0198\0\u1c17\0\u1c4a\0\314"+
    "\0\u0198\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u0198\0\u0198"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u0198\0\u0198\0\u1e15\0\u0198\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u1daf\0\u1ee1\0\u1f14\0\u0198\0\u0198\0\u0198"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u1fe0\0\u2046\0\u1ee1"+
    "\0\u2079\0\u20ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\2\13\1\15\1\13\1\5\1\16\1\17\1\5\1\20"+
    "\2\13\1\21\1\22\1\23\2\13\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\13\1\45"+
    "\1\46\5\13\1\5\1\47\2\5\51\47\1\50\5\47"+
    "\1\51\1\47\2\5\51\47\1\52\5\47\1\51\1\5"+
    "\1\6\2\7\1\53\1\5\1\13\1\54\1\55\2\13"+
    "\1\5\1\13\1\5\1\56\1\57\1\5\2\13\1\60"+
    "\1\61\1\13\1\62\1\13\1\63\1\24\1\25\1\64"+
    "\1\27\1\30\1\65\1\66\1\67\5\5\1\70\1\71"+
    "\2\5\1\72\1\73\1\74\1\75\1\76\1\13\1\77"+
    "\1\100\1\5\65\0\1\7\64\0\1\101\1\102\63\0"+
    "\1\13\1\103\3\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\1\104\4\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\20\0\1\17\62\0\1\17"+
    "\1\105\50\0\1\106\4\13\1\0\2\13\1\0\1\13"+
    "\1\0\1\13\1\107\6\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\1\110\1\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\1\13\1\111\6\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\6\13\1\112\1\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\41\0\1\113\62\0\1\114\62\0\1\115\62\0"+
    "\1\116\65\0\1\117\63\0\1\120\24\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\1\13\1\121"+
    "\2\0\2\13\1\0\5\13\7\0\5\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\1\122\1\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\6\13\1\123\1\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\1\0\1\47\2\0\51\47\1\0"+
    "\5\47\7\0\1\124\1\0\1\125\1\0\1\126\41\0"+
    "\1\127\14\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\130\5\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\1\13\1\131\3\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\20\0\1\57\51\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\1\132\1\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\5\13\1\133\2\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\1\13\1\134\6\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\1\135\1\13\2\0\2\13\1\0"+
    "\5\13\7\0\2\13\1\136\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\1\13\1\137\2\0\1\140"+
    "\1\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\1\13\1\141\6\13\15\0\1\142\1\13"+
    "\2\0\2\13\1\0\5\13\7\0\1\13\1\143\3\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\5\13\1\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\144\3\13\1\145\1\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\3\13"+
    "\1\146\1\13\1\0\2\13\1\0\1\13\1\0\6\13"+
    "\1\147\1\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\1\13\1\150\3\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\1\0\1\101\1\6\1\7\60\101\5\151\1\152\55\151"+
    "\6\0\2\13\1\153\1\13\1\154\1\0\2\13\1\0"+
    "\1\13\1\0\5\13\1\155\2\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\3\13\1\156\1\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\20\0\1\157\51\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\6\13\1\160\1\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\161\5\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\4\13\1\162"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\1\163\4\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\7\13\1\164\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\5\13\1\165\2\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\13\1\166\3\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\1\13\1\167\2\0\2\13\1\0"+
    "\5\13\7\0\1\13\1\170\3\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\1\171\4\13"+
    "\7\0\5\13\1\0\2\13\1\0\1\13\1\0\3\13"+
    "\1\172\4\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\5\13\1\0\2\13\1\0\1\13\1\0\10\13"+
    "\15\0\1\173\1\13\2\0\2\13\1\0\5\13\7\0"+
    "\4\13\1\174\1\0\2\13\1\0\1\13\1\0\10\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\5\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\1\175\1\13\1\0\5\13\7\0\1\13\1\176"+
    "\3\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\1\13\1\177\6\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\1\200\4\13\7\0\4\13\1\201\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\1\202\7\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\1\13\1\203\6\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\204\5\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\2\13\1\205\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\206\4\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\1\207\1\13\2\0\2\13\1\0\5\13"+
    "\1\0\5\151\1\210\61\151\1\211\1\210\55\151\6\0"+
    "\3\13\1\212\1\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\1\213\1\13\1\0\5\13\7\0\1\13"+
    "\1\214\3\13\1\0\2\13\1\0\1\13\1\0\10\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\1\13"+
    "\1\215\3\13\1\0\2\13\1\0\1\13\1\0\10\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\5\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\1\13"+
    "\1\216\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\3\13\1\217\4\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\6\13\1\220\1\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\1\221\4\13"+
    "\1\0\2\13\1\0\1\13\1\0\6\13\1\222\1\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\4\13"+
    "\1\223\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\5\13\1\224\2\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\1\13\1\225"+
    "\2\0\2\13\1\0\5\13\7\0\2\13\1\226\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\2\13\1\227\2\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\4\13\1\230\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\1\13\1\231\3\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\2\13\1\232\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\1\13\1\233\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\2\13"+
    "\1\234\2\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\1\13\1\235\6\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\3\13\1\236\4\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\6\13\1\237\1\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\2\13\1\240\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\1\241\1\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\2\13\1\242"+
    "\2\13\1\0\4\151\1\7\1\210\55\151\6\0\1\243"+
    "\4\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\1\13\1\244"+
    "\3\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\2\13\1\245"+
    "\2\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\1\13\1\246"+
    "\3\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\5\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\1\247\1\13"+
    "\2\0\2\13\1\0\5\13\7\0\1\250\4\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\2\13\1\251\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\6\13\1\252\1\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\1\13\1\253\3\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\1\254\7\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\4\13\1\255\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\256\5\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\4\13\1\257"+
    "\7\0\1\13\1\260\3\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\3\13\1\261\1\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\5\13\1\0\2\13\1\0\1\13\1\0\3\13"+
    "\1\262\4\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\1\263\4\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\6\13\1\264"+
    "\1\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\1\13\1\265\3\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\4\13\1\266\7\0\4\13"+
    "\1\267\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\1\270\4\13"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\5\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\1\271\1\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\1\13\1\272\2\0\2\13"+
    "\1\0\5\13\7\0\2\13\1\273\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\274\4\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\4\13\1\275\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\4\13\1\276\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\1\277\1\13\2\0\2\13\1\0\5\13\7\0\1\13"+
    "\1\300\3\13\1\0\2\13\1\0\1\13\1\0\10\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\5\13"+
    "\1\0\2\13\1\0\1\13\1\0\2\13\1\301\5\13"+
    "\15\0\2\13\2\0\2\13\1\0\5\13\7\0\4\13"+
    "\1\302\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\2\13\2\0\2\13\1\0\5\13\7\0\4\13\1\303"+
    "\1\0\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\1\304\4\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\2\13\1\305\2\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\2\0\3\306\1\307\1\0\5\13"+
    "\1\310\2\13\1\0\1\13\1\0\10\13\15\0\2\13"+
    "\2\0\2\13\1\0\5\13\7\0\1\311\4\13\1\0"+
    "\2\13\1\0\1\13\1\0\10\13\15\0\2\13\2\0"+
    "\2\13\1\0\5\13\7\0\5\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\1\312\1\13\2\0\2\13"+
    "\1\0\5\13\7\0\5\13\1\0\2\13\1\0\1\13"+
    "\1\0\1\13\1\313\6\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\13\1\314\3\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\2\13\1\315\2\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\13\1\316\3\13\1\0\2\13"+
    "\1\0\1\13\1\0\10\13\15\0\2\13\2\0\2\13"+
    "\1\0\5\13\7\0\1\317\4\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\2\13\1\320\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\1\13\1\321\6\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\2\0\3\306\1\307\6\0\1\310\53\0\1\322"+
    "\1\323\63\0\1\324\4\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\5\13\1\0\2\13\1\0\1\13\1\0\3\13"+
    "\1\325\4\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\7\0\4\13\1\326\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\3\13\1\327"+
    "\4\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\2\13\1\330"+
    "\5\13\15\0\2\13\2\0\2\13\1\0\5\13\7\0"+
    "\5\13\1\0\2\13\1\0\1\13\1\0\10\13\15\0"+
    "\1\13\1\331\2\0\2\13\1\0\5\13\1\0\1\322"+
    "\2\306\1\322\1\332\6\322\1\333\47\322\5\334\1\335"+
    "\55\334\6\0\2\13\1\336\2\13\1\0\2\13\1\0"+
    "\1\13\1\0\10\13\15\0\2\13\2\0\2\13\1\0"+
    "\5\13\7\0\5\13\1\0\2\13\1\0\1\13\1\0"+
    "\10\13\15\0\2\13\2\0\1\337\1\13\1\0\5\13"+
    "\7\0\1\13\1\340\3\13\1\0\2\13\1\0\1\13"+
    "\1\0\10\13\15\0\2\13\2\0\2\13\1\0\5\13"+
    "\1\0\1\322\2\306\1\322\1\332\1\341\5\322\1\333"+
    "\47\322\5\334\1\342\61\334\1\343\1\342\55\334\1\344"+
    "\2\343\1\344\1\345\6\344\1\346\47\344\4\334\1\306"+
    "\1\342\56\334\3\343\1\347\1\342\5\334\1\350\47\334"+
    "\1\344\2\343\1\344\1\345\1\351\5\344\1\346\50\344"+
    "\2\343\1\344\1\345\1\341\5\344\1\346\47\344\4\334"+
    "\1\344\1\352\55\334\1\344\2\343\1\344\1\332\1\351"+
    "\5\344\1\346\47\344\4\334\1\343\1\335\55\334";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\6\1\5\11\3\1\1\11\3\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\11\1\4\11"+
    "\4\1\1\11\5\1\1\0\2\1\1\0\5\1\6\11"+
    "\3\1\4\11\21\1\2\0\35\1\1\0\75\1\2\0"+
    "\1\11\11\1\2\0\6\1\1\0\1\1\2\0\3\1"+
    "\5\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer("");
    private Symbol symbol(sym type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(sym type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3590) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.ERROR, yytext().toString());
            } 
            // fall through
          case 76: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 77: break;
          case 3: 
            { return symbol(sym.DIV);
            } 
            // fall through
          case 78: break;
          case 4: 
            { return symbol(sym.TIMES);
            } 
            // fall through
          case 79: break;
          case 5: 
            { return symbol(sym.IDENTIFIER);
            } 
            // fall through
          case 80: break;
          case 6: 
            { return symbol(sym.OPEN_PARENTHESES);
            } 
            // fall through
          case 81: break;
          case 7: 
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 82: break;
          case 8: 
            { return symbol(sym.INTEGER);
            } 
            // fall through
          case 83: break;
          case 9: 
            { return symbol(sym.OPEN_CURLY_BRACKET);
            } 
            // fall through
          case 84: break;
          case 10: 
            { return symbol(sym.CLOSE_CURLY_BRACKET);
            } 
            // fall through
          case 85: break;
          case 11: 
            { return symbol(sym.CLOSE_PARENTHESES);
            } 
            // fall through
          case 86: break;
          case 12: 
            { return symbol(sym.OPEN_SQUARE_BRACKET);
            } 
            // fall through
          case 87: break;
          case 13: 
            { return symbol(sym.CLOSE_SQUARE_BRACKET);
            } 
            // fall through
          case 88: break;
          case 14: 
            { return symbol(sym.LESS_THAN);
            } 
            // fall through
          case 89: break;
          case 15: 
            { return symbol(sym.GREATER_THAN);
            } 
            // fall through
          case 90: break;
          case 16: 
            { return symbol(sym.ASSIGN);
            } 
            // fall through
          case 91: break;
          case 17: 
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 92: break;
          case 18: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 93: break;
          case 19: 
            { return symbol(sym.XOR);
            } 
            // fall through
          case 94: break;
          case 20: 
            { return symbol(sym.SEMI);
            } 
            // fall through
          case 95: break;
          case 21: 
            { return symbol(sym.COMA);
            } 
            // fall through
          case 96: break;
          case 22: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 97: break;
          case 23: 
            { string.append( yytext() );
            } 
            // fall through
          case 98: break;
          case 24: 
            { yybegin(YYINITIAL);
return symbol(sym.STRING_LITERAL,
string.toString());
            } 
            // fall through
          case 99: break;
          case 25: 
            { string.append('\\');
            } 
            // fall through
          case 100: break;
          case 26: 
            { yybegin(COMPONENTSTATE);
return symbol(sym.STRING_LITERAL,
string.toString());
            } 
            // fall through
          case 101: break;
          case 27: 
            { return symbol(sym.SLASH);
            } 
            // fall through
          case 102: break;
          case 28: 
            { yybegin(YYINITIAL); return symbol(sym.CLOSE_PARENTHESES, string.toString());
            } 
            // fall through
          case 103: break;
          case 29: 
            { string.setLength(0); yybegin(STRING_COMP);
            } 
            // fall through
          case 104: break;
          case 30: 
            { return symbol(sym.X);
            } 
            // fall through
          case 105: break;
          case 31: 
            { return symbol(sym.Y);
            } 
            // fall through
          case 106: break;
          case 32: 
            { return symbol(sym.IF);
            } 
            // fall through
          case 107: break;
          case 33: 
            { return symbol(sym.LESS_THAN_OR_EQUAL);
            } 
            // fall through
          case 108: break;
          case 34: 
            { return symbol(sym.GREATER_THAN_OR_EQUAL);
            } 
            // fall through
          case 109: break;
          case 35: 
            { return symbol(sym.EQUAL);
            } 
            // fall through
          case 110: break;
          case 36: 
            { return symbol(sym.NOT_EQUAL);
            } 
            // fall through
          case 111: break;
          case 37: 
            { return symbol(sym.AND);
            } 
            // fall through
          case 112: break;
          case 38: 
            { return symbol(sym.OR);
            } 
            // fall through
          case 113: break;
          case 39: 
            { string.append('\r');
            } 
            // fall through
          case 114: break;
          case 40: 
            { string.append('\t');
            } 
            // fall through
          case 115: break;
          case 41: 
            { string.append('\n');
            } 
            // fall through
          case 116: break;
          case 42: 
            { string.append('\"');
            } 
            // fall through
          case 117: break;
          case 43: 
            { return symbol(sym.ID);
            } 
            // fall through
          case 118: break;
          case 44: 
            { return symbol(sym.DOUBLE);
            } 
            // fall through
          case 119: break;
          case 45: 
            { return symbol(sym.VAR);
            } 
            // fall through
          case 120: break;
          case 46: 
            { return symbol(sym.POW);
            } 
            // fall through
          case 121: break;
          case 47: 
            { return symbol(sym.MAX);
            } 
            // fall through
          case 122: break;
          case 48: 
            { return symbol(sym.MIN);
            } 
            // fall through
          case 123: break;
          case 49: 
            { return symbol(sym.TRUE);
            } 
            // fall through
          case 124: break;
          case 50: 
            { return symbol(sym.FROM);
            } 
            // fall through
          case 125: break;
          case 51: 
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 126: break;
          case 52: 
            { return symbol(sym.TEXT);
            } 
            // fall through
          case 127: break;
          case 53: 
            { return symbol(sym.LIST);
            } 
            // fall through
          case 128: break;
          case 54: 
            { return symbol(sym.ITEM);
            } 
            // fall through
          case 129: break;
          case 55: 
            { return symbol(sym.FALSE);
            } 
            // fall through
          case 130: break;
          case 56: 
            { return symbol(sym.PANEL);
            } 
            // fall through
          case 131: break;
          case 57: 
            { return symbol(sym.WIDTH);
            } 
            // fall through
          case 132: break;
          case 58: 
            { return symbol(sym.IMAGE);
            } 
            // fall through
          case 133: break;
          case 59: 
            { return symbol(sym.COLOR);
            } 
            // fall through
          case 134: break;
          case 60: 
            { return symbol(sym.RETURN);
            } 
            // fall through
          case 135: break;
          case 61: 
            { return symbol(sym.RENDER);
            } 
            // fall through
          case 136: break;
          case 62: 
            { return symbol(sym.IMPORT);
            } 
            // fall through
          case 137: break;
          case 63: 
            { return symbol(sym.BUTTON);
            } 
            // fall through
          case 138: break;
          case 64: 
            { return symbol(sym.BORDER);
            } 
            // fall through
          case 139: break;
          case 65: 
            { return symbol(sym.HEIGHT);
            } 
            // fall through
          case 140: break;
          case 66: 
            { string.setLength(0); yybegin(COMPONENTSTATE);
            } 
            // fall through
          case 141: break;
          case 67: 
            { return symbol(sym.REPEAT);
            } 
            // fall through
          case 142: break;
          case 68: 
            { return symbol(sym.SPINNER);
            } 
            // fall through
          case 143: break;
          case 69: 
            { return symbol(sym.DEFAULT);
            } 
            // fall through
          case 144: break;
          case 70: 
            { return symbol(sym.PRINT);
            } 
            // fall through
          case 145: break;
          case 71: 
            { return symbol(sym.WHILE);
            } 
            // fall through
          case 146: break;
          case 72: 
            { return symbol(sym.ELEMENTS);
            } 
            // fall through
          case 147: break;
          case 73: 
            { return symbol(sym.COMPONENT);
            } 
            // fall through
          case 148: break;
          case 74: 
            { return symbol(sym.TEXTFIELD);
            } 
            // fall through
          case 149: break;
          case 75: 
            { return symbol(sym.CLASS_NAME);
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
